#include <opencv2/opencv.hpp>
#include <iostream>
#include <math.h>
using namespace cv;
Mat src, gray_src, dst;
int threshold_value = 127;
int threshold_max = 255;
int type_value = 2;
int type_max = 4;

void Threshold_Demo(int, void*);

int main(int argc, char** argv)
{

	src = imread("D:/1.jpg");
	if (!src.data)
	{
		printf("could not load image.");
		return -1;
	}
	namedWindow("input image", CV_WINDOW_AUTOSIZE);
	namedWindow("output image", CV_WINDOW_AUTOSIZE);
	imshow("input image", src);
	cvtColor(src, gray_src, CV_BGR2GRAY);
	createTrackbar("Threshold Value:", "output image", &threshold_value, threshold_max, Threshold_Demo);
	createTrackbar("Type Value:", "output image", &type_value, type_max, Threshold_Demo);

	waitKey(0);
	return 0;
}

void Threshold_Demo(int, void*)
{
	cvtColor(src, gray_src, CV_BGR2GRAY);
// 	printf("%d", THRESH_BINARY);
// 	printf("%d", THRESH_BINARY_INV);
// 	printf("%d", THRESH_TRUNC);
// 	printf("%d", THRESH_TOZERO);
// 	printf("%d", THRESH_TOZERO_INV);
	threshold(gray_src, dst, threshold_value, threshold_max,  type_value);
// 	threshold(gray_src, dst, 0,255, THRESH_OTSU | type_value);//自动算阈值
// 	threshold(gray_src, dst, 0,255, THRESH_TRIANGLE | type_value);//三角法取阈值（根据直方图）

	imshow("output image", dst);
}
